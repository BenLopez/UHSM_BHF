summary(MinK$K[MinK$NewAF=="No"])
sd(MinK$K[MinK$NewAF=="No"])
t.test(K~NewAF,data=MeanK)
wilcox.test(K~NewAF,data=MeanK)
library(ggplot2)
ggplot(MeanK, aes(K, fill = NewAF)) + geom_density(alpha = 0.2)
ggplot(MinK, aes(K, fill = NewAF)) + geom_density(alpha = 0.2)
boxplot(K~NewAF,data = MeanK)
MeanPreandNoAFK=rbind(MeanPreAFK,NoAFMeanK)
MeanPreandNoAFK$NewAF=ifelse(MeanPreandNoAFK$FirstNewAF=="2020-12-12 12:12:12", "No", "Yes" )
t.test(K~NewAF,data=MeanPreandNoAFK)
boxplot(K~NewAF,data = MeanPreandNoAFK)
summary(MeanPreandNoAFK$K[MeanPreandNoAFK$NewAF=="Yes"])
sd(MeanPreandNoAFK$K[MeanPreandNoAFK$NewAF=="Yes"])
summary(MeanPreandNoAFK$K[MeanPreandNoAFK$NewAF=="No"])
sd(MeanPreandNoAFK$K[MeanPreandNoAFK$NewAF=="No"])
#Patients with AF seem to have higher K+ levels.
Dendrite=Dendrite[,c("NewPseudoId", "LogisticEUROScore")]
MinK=merge(MinK,Dendrite, by="NewPseudoId", all.x = T)
MeanK=merge(MeanK,Dendrite, by="NewPseudoId", all.x = T)
MeanPreandNoAFK=merge(MeanPreandNoAFK,Dendrite, by="NewPseudoId", all.x = T)
summary(MeanK$NewAF)
MeanK$NewAFNum=ifelse(MeanK$NewAF=="Yes",1,0)
MinK$NewAFNum=ifelse(MinK$NewAF=="Yes",1,0)
MeanPreandNoAFK$NewAFNum=ifelse(MeanPreandNoAFK$NewAF=="Yes",1,0)
MinK$K3.5=ifelse(MinK$K<3.5,1,0)
MinK$K3.5to4.5=ifelse(MinK$K>=3.5&MinK$K<4.5,1,0)
MinK$K4.5=ifelse(MinK$K>=4.5,1,0)
MinK=merge(MinK,PatientIndex[,c("NewPseudoId", "FirstNewAF", "FirstITUEntry", "Age","CPB","ProcDetails2")],by="NewPseudoId", all.x=T)
MinK$K3.5=ifelse(MinK$K<3.5,1,0)
MinK$K3.5to4.5=ifelse(MinK$K>=$K<4.5,1,0)
MinK$K3.5to4.5=ifelse(MinK$K>=3.5&MinK$K<4.5,1,0)
MinK$K4.5=ifelse(MinK$K>=4.5,1,0)
MinK$KLow=ifelse(MinK$K<4.5,1,0)
MinK$KStrat=ifelse(MinK$K<3.5,"Low",
ifelse(MinK$K>=3.5&MinK$K<4.5,"Med","VHigh"))
summary(as.factor(MinK$KLow))
Table1=table(MinK$KLow,MinK$NewAF)
prop.table((Table1))
table3=table(MinK$KStrat,MinK$NewAF)
table3
LastPreAFKorMinNoAFKmodel=glm(NewAFNum~LogisticEUROScore+CPB+KStrat, data=MinK, family = binomial())
summary(LastPreAFKorMinNoAFKmodel)
options(scipen = 999)
exp(coef(LastPreAFKorMinNoAFKmodel))
exp(confint(LastPreAFKorMinNoAFKmodel))
summary(MinK$K[MinK$NewAF=="Yes"])
summary(MinK$K[MinK$NewAF=="No"])
summary(as.factor(MinK$KLow)[MinK$NewAF=="Yes"])
summary(as.factor(MinK$KLow)[MinK$NewAF=="No"])
summary(MinK$NewAFNum)
summary(MinK$LogisticEUROScore)
summary(MinK$K)
summary(MinK$Age)
summary(MinK$CPB)
#Predict AF using LogEuroSCORE and mean K before AF or mean K overall for those without AF
MeanPreandNoAFK=merge(MeanPreandNoAFK,PatientIndex[,c("NewPseudoId", "FirstNewAF", "FirstITUEntry", "Age","CPB","ProcDetails2")],by="NewPseudoId", all.x=T)
MeanPreandNoAFK$KLow=ifelse(as.numeric(MeanPreandNoAFK$K)<4.5,1,0)
summary(as.factor(MeanPreandNoAFK$KLow))
MeanPreandNoAFK$KStrat=ifelse(MeanPreandNoAFK$K<3.5,"Low",
ifelse(MeanPreandNoAFK$K>=3.5&MeanPreandNoAFK$K<4.5,"Med","VHigh"))
MeanPreandNoAFKmodel=glm(NewAFNum~LogisticEUROScore+CPB+KLow, data=MeanPreandNoAFK, family = binomial())
summary(MeanPreandNoAFKmodel)
Table2=table(MeanPreandNoAFK$KLow,MeanPreandNoAFK$NewAF)
prop.table((Table2))
exp(coef(MeanPreandNoAFKmodel))
exp(confint(MeanPreandNoAFKmodel))
table4=table(MeanPreandNoAFK$KStrat,MeanPreandNoAFK$NewAF)
table4
summary(MeanPreandNoAFK$K[MeanPreandNoAFK$NewAF=="Yes"])
summary(MeanPreandNoAFK$K[MeanPreandNoAFK$NewAF=="No"])
summary(as.numeric(PatientIndex$Age[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
summary(as.numeric(PatientIndex$Age[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
length(unique(PatientIndex$Age[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
length(unique(PatientIndex$NewPseudoId[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
length(unique(PatientIndex$NewPseudoId[PatientIndex$NewPseudoId%in%AFLastKK$NewPseudoId]))
length(unique(PatientIndex$NewPseudoId[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
summary(as.numeric(PatientIndex$Age[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
summary(as.numeric(PatientIndex$Age[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
sd(as.numeric(PatientIndex$Age[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
sd(as.numeric(PatientIndex$Age[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
summary((PatientIndex$Gender[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
summary((PatientIndex$Gender[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
152/541
678/2518
summary((PatientIndex$Weight[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
summary((PatientIndex$Weight[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
sd((PatientIndex$Weight[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
sd((PatientIndex$Weight[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
summary((Dendrite$LogisticEUROScore[Dendrite$NewPseudoId%in%AFLastK$NewPseudoId]))
summary((Dendrite$LogisticEUROScore[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
summary((PatientIndex$ProcDetails[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
summary((PatientIndex$ProcDetails[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
summary((PatientIndex$ProcDetails[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]/541))
265+125+103+43+5
265/541
125/541
103/541
43/541
5/541
summary((PatientIndex$ProcDetails[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
1595+453+308+121+41
1595/2518
453/2518
308/2518
121/2518
41/2518
summary((PatientIndex$Urgency[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
332/541
195/541
13/541
1/541
summary((PatientIndex$Urgency[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
1398/2518
1076/2518
36/2518
8/2518
summary((PatientIndex$CPB[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
summary((PatientIndex$CPB[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
View(UHSM2016)
UHSM2016$CPB[1]
July$CPB[1]
Dec$CPB[1]
July$CPB=(as.numeric(substr(as.character(July$CPB),1,2))*60)+as.numeric(substr(as.character(July$CPB),4,5))
Dec$CPB=(as.numeric(substr(as.character(Dec$CPB),1,2))*60)+as.numeric(substr(as.character(Dec$CPB),4,5))
July$CPB=[1]
July$CPB[1]
Dec$CPB[1]
PatientIndex=rbind(UHSM2016,July, Dec)
PatientIndexOriginal=rbind(UHSM2016,July, Dec)
length(unique(PatientIndex$PseudoId))
summary(as.factor(PatientIndex$ProcDetails))
PatientIndex=PatientIndex[!PatientIndex$PseudoId%in%RemoveThese$PseudoId,]
#We want to remove all data recorded after a readmission which followed discharge to the ward (so no z-x-x-2, z-x-x-3 etc)
PatientIndex=PatientIndex[PatientIndex$ITUAdmission==1,]
PatientIndex=PatientIndex[!PatientIndex$PseudoId%in%TakeTheseToo$PseudoId,]
#remove the incorrect x and xx patients
PatientIndex=PatientIndex[!PatientIndex$PseudoId%in%xandxxstoberemoved$PseudoId,]
length(unique(PatientIndex$PseudoId)) #3374
PatientIndex=PatientIndex[PatientIndex$AdmissionOp==1,]
PatientIndex=PatientIndex[PatientIndex$Admission==1,]
length(unique(PatientIndex$PseudoId)) #3372
save.image("filesloaded.rdata")
PatientIndex$ProcDetails2=
ifelse(PatientIndex$ProcDetails=="Valve"|PatientIndex$ProcDetails=="CABG and Valve"|PatientIndex$ProcDetails=="Aortic and Valve"|
PatientIndex$ProcDetails=="Valve and Other"|PatientIndex$ProcDetails=="Aortic and Valve and CABG"|PatientIndex$ProcDetails=="CABG and Valve and Other"|
PatientIndex$ProcDetails=="Aortic and Valve and Other"|PatientIndex$ProcDetails=="Mitral valve vegetectomy"|
PatientIndex$ProcDetails=="Aortic and Valve and CABG and Other","Valve", "Not Valve")
PatientIndex$CPB=as.numeric(as.character(PatientIndex$CPB))
summary(as.factor(PatientIndex$ProcDetails2))
summary((PatientIndex$CPB))
summary((Dendrite$LogisticEUROScore))
summary((Dendrite$LogisticEUROScore[Dendrite$NewPseudoId%in%MinK$NewPseudoId]))
summary((Dendrite$LogisticEUROScore[Dendrite$NewPseudoId%in%NoAFNoK$NewPseudoId]))
summary((Dendrite$LogisticEUROScore[Dendrite$NewPseudoId%in%NoAFK$NewPseudoId]))
summary(MinK$LogisticEUROScore)
summary((Dendrite$LogisticEUROScore[Dendrite$NewPseudoId%in%AFLastK$NewPseudoId]))
summary((Dendrite$LogisticEUROScore[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
summary((Dendrite$LogisticEUROScore[Dendrite$NewPseudoId%in%NoAFK$NewPseudoId]))
summary((PatientIndex$CPB[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
summary((PatientIndex$CPB[PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
summary(as.numeric(PatientIndex$Age))
sd(as.numeric(PatientIndex$Age))
summary((PatientIndex$Gender))
summary(as.numeric(PatientIndex$Age[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId|PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
summary(as.numeric(PatientIndex$Age[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId|PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
sd(as.numeric(PatientIndex$Age[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId|PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
summary((PatientIndex$Gender[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId|PatientIndex$NewPseudoId%in%NoAFK$NewPseudoId]))
830/3059
summary((PatientIndex$Urgency[PatientIndex$NewPseudoId%in%AFLastK$NewPseudoId]))
(265+1595)/3059
summary(AFList$DiffTimetoAF)
summary(AFList$DiffTimetoAF[AFList$NewPseudoId%in%AFLastK$NewPseudoId])
summary(as.numeric(AFList$DiffTimetoAF[AFList$NewPseudoId%in%AFLastK$NewPseudoId]))
load("~/AF/alldone.rdata")
boxplot(KNum2~AF,data=DoseIndex)
boxplot(MgNum2~AF,data=DoseIndex)
boxplot(MgNum2~AF,data=DoseIndex,outer(NO))
boxplot(MgNum2~AF,data=DoseIndex,outline==F)
boxplot(MgNum2~AF,data=DoseIndex,outline=F)
ggplot(DoseIndex, aes(MgNum2, fill = AFFinal)) + geom_density(alpha = 0.2)
library(ggplot2)
ggplot(DoseIndex, aes(KNum2, fill = AFFinal)) + geom_density(alpha = 0.2)
ggplot(DoseIndex, aes(MgNum2, fill = AFFinal)) + geom_density(alpha = 0.2)
boxplot(KNum2~AF,data=DoseIndex, outlier = F)
boxplot(KNum2~AF,data=DoseIndex, outline = F)
boxplot(MgNum2~AF,data=DoseIndex,outline=F)
boxplot(MgNum2~AF,data=DoseIndex,outline=T)
boxplot(KNum2~AF,data=DoseIndex, outline = T)
boxplot(KNum2~AF,data=DoseIndex, outline = T, ylim=c(0,20))
boxplot(MgNum2~AF,data=DoseIndex,outline=T)
summary(as.factor(DoseIndexNoAF$MgNum2))
hist(DoseIndexAF$MgNum2)
hist(DoseIndexNoAF$MgNum2)
boxplot(MgNum2~AF,data=DoseIndex,outline=T)
summary(DoseIndexNoAF$MgNum2)
boxplot(MgNum2~AF,data=DoseIndex,outline=F)
boxplot(KNum2~AF,data=DoseIndex, outline = F, ylim=c(0,20))
boxplot(KNum2~AF,data=DoseIndex, outline = F)
boxplot(MgNum2~AF,data=DoseIndex,outline=F)
boxplot(MgNum2~AF,data=DoseIndex,outline=T)
T
boxplot(KNum2~AF,data=DoseIndex, outline = T, ylim=c(0,20))
boxplot(MgNum2~AF,data=DoseIndex,outline=T)
summary(as.factor(DoseIndexNoAF$MgNum2))
summary(as.factor(DoseIndex$MgNum[DoseIndex$NewPseudoId%in%AFList$NewPseudoId]))
#NEXT LINE USED TO GET MEDIAN NUMBER OF DOSE IN FIRST 72 HRS
#RUN that line instead of 115 and then run to the end
Fluids3=Fluids2[as.numeric(Fluids2$Result.DT2)< as.numeric(Fluids2$FirstITUEntry)+72*60*60,]
Fluids3=Fluids3[order(Fluids3$NewPseudoId,Fluids3$Result.DT2),]
Fluids3=Fluids3[Fluids3$NewPseudoId%in%AllPts$NewPseudoId,]
summary(as.factor(Fluids3$PseudoId))
length(unique(Fluids3$NewPseudoId))
summary(as.factor(Fluids3$MgGiven))
summary(as.factor(Fluids3$KGiven))
Fluids3$KNum=ifelse(Fluids3$KGiven=="Yes"&is.na(Fluids3$KGiven)==F,1,0)
summary(as.factor(Fluids3$KNum))
Fluids3$MgNum=ifelse(Fluids3$MgGiven=="Yes"&is.na(Fluids3$MgGiven)==F,1,0)
summary(as.factor(Fluids3$MgNum))
KDoses=aggregate(KNum~NewPseudoId,data = Fluids3, FUN=sum)
MgDoses=aggregate(MgNum~NewPseudoId,data=Fluids3,FUN=sum)
DoseIndex=PatientIndex[PatientIndex$NewPseudoId%in%AllPts$NewPseudoId,]
DoseIndex=merge(DoseIndex,KDoses,by="NewPseudoId",all.x=T)
DoseIndex=merge(DoseIndex,MgDoses,by="NewPseudoId",all.x=T)
DoseIndex=DoseIndex[!DoseIndex$NewPseudoId%in%InAFonArrival6$NewPseudoId,]
summary(as.factor(DoseIndex$KNum[DoseIndex$NewPseudoId%in%AFList$NewPseudoId]))
summary(as.factor(DoseIndex$MgNum[DoseIndex$NewPseudoId%in%AFList$NewPseudoId]))
DoseIndex$KNum2=ifelse(is.na(DoseIndex$KNum),0,as.character(DoseIndex$KNum))
DoseIndex$MgNum2=ifelse(is.na(DoseIndex$MgNum),0,as.character(DoseIndex$MgNum))
DoseIndex$KNum2=as.numeric(DoseIndex$KNum2)
DoseIndex$MgNum2=as.numeric(DoseIndex$MgNum2)
summary(as.factor(DoseIndex$KNum2[DoseIndex$NewPseudoId%in%AFList$NewPseudoId]))
summary(as.factor(DoseIndex$MgNum2[DoseIndex$NewPseudoId%in%AFList$NewPseudoId]))
summary(as.factor(DoseIndex$KNum2[DoseIndex$NewPseudoId%in%NoAFList$NewPseudoId]))
summary(as.factor(DoseIndex$MgNum2[DoseIndex$NewPseudoId%in%NoAFList$NewPseudoId]))
DoseIndex$KNum2=ifelse(DoseIndex$NewPseudoId=="1029-1-1-1", 11, as.numeric(as.character(DoseIndex$KNum2)))
DoseIndex$KNum2=ifelse(DoseIndex$NewPseudoId=="11-1-1-1", 3, as.numeric(as.character(DoseIndex$KNum2)))
DoseIndex$KNum2=ifelse(DoseIndex$NewPseudoId=="z1185-1-1-1", 12, as.numeric(as.character(DoseIndex$KNum2)))
DoseIndex$KNum2=ifelse(DoseIndex$NewPseudoId=="2077-1-1-1", 2, as.numeric(as.character(DoseIndex$KNum2)))
DoseIndex$KNum2=ifelse(DoseIndex$NewPseudoId=="z1273-1-1-1", 5, as.numeric(as.character(DoseIndex$KNum2)))
DoseIndex$AFFinal=ifelse(DoseIndex$NewPseudoId%in%AFList$NewPseudoId,"Yes","No")
summary(as.factor(DoseIndex$AFFinal))
DoseIndexAF=DoseIndex[DoseIndex$NewPseudoId%in%AFList$NewPseudoId,]
DoseIndexNoAF=DoseIndex[DoseIndex$NewPseudoId%in%NoAFList$NewPseudoId,]
summary(as.factor(DoseIndex$AFFinal))
DoseIndex$AF=ifelse(DoseIndex$AFFinal=="No", "No AF", "AF")
boxplot(KNum2~AF,data=DoseIndex, outline = T, ylim=c(0,20))
summary(DoseIndexAF$KNum2)
summary(DoseIndexNoAF$KNum2)
mean(DoseIndexAF$KNum2)
mean(DoseIndexNoAF$KNum2)
hist(DoseIndex$MgNum2)
hist(DoseIndexAF$MgNum2)
hist(DoseIndexNoAF$MgNum2)
summary(DoseIndexAF$MgNum2)
summary(DoseIndexNoAF$MgNum2)
length(unique(NoAF$NewPseudoId))
length(unique(AF$NewPseudoId))
length(unique(Fluids3$NewPseudoId[Fluids3$NewPseudoId%in%DoseIndex$NewPseudoId&Fluids3$KGiven=="Yes"&is.na(Fluids3$KGiven)==F]))
length(unique(Fluids3$NewPseudoId[Fluids3$NewPseudoId%in%DoseIndex$NewPseudoId&Fluids3$MgGiven=="Yes"&is.na(Fluids3$MgGiven)==F]))
length(unique(Fluids3$NewPseudoId[Fluids3$NewPseudoId%in%DoseIndex$NewPseudoId]))
View(Fluids3)
load("~/AF/alldone.rdata")
boxplot(MgNum2~AF,data=DoseIndex)
boxplot(KNum2~AF,data=DoseIndex)
boxplot(KNum2~AF,data=DoseIndex, ylim=c(0,20))
boxplot(MgNum2~AF,data=DoseIndex)
summary(DoseIndexAF$MgNum2)
summary(DoseIndexNoAF$MgNum2)
summary(as.factor(DoseIndexAF$MgNum2))
summary((as.factor(DoseIndexNoAF$MgNum2))
summary(as.factor(DoseIndexNoAF$MgNum2))
summary(as.factor(DoseIndexNoAF$MgNum2))
summary(as.factor(DoseIndex$KNum2))
summary(as.factor(DoseIndex$MgNum2))
summary(as.factor(DoseIndexNoAF$KNum2))
summary(as.factor(DoseIndexAF$KNum2))
PtIndex=read.csv(file.choose())
#Copied from Making PtIndex no kinds lungs...###1188
#Load original Patient Indexes
July=read.csv(file.choose())
Dec=read.csv(file.choose())
setdiff(colnames(Dec), colnames(July))
July$FirstAKI1UO=NULL
July$FirstAKI1AbsoluteCr=NULL
July$FirstAKI1RelativeCr=NULL
July$FirstITUEntry[1]
July$FirstITUEntry=strptime(as.character(July$FirstITUEntry),format= "%Y-%m-%d %H:%M:%S")
July$LastITUEntry[1]
July$LastITUEntry=strptime(as.character(July$LastITUEntry),format= "%Y-%m-%d %H:%M:%S")
July$FirstNewAF
July$FirstNewAF=strptime(as.character(July$FirstNewAF),format= "%Y-%m-%d %H:%M:%S")
summary(July$FirstNewAF)
Dec$FirstAKI1UO=NULL
Dec$FirstAKI1AbsoluteCr=NULL
Dec$FirstAKI1RelativeCr=NULL
Dec$FirstITUEntry[1]
Dec$LastITUEntry[1]
Dec$FirstITUEntry=strptime(as.character(Dec$FirstITUEntry),format= "%d/%m/%Y %H:%M")
Dec$LastITUEntry=strptime(as.character(Dec$LastITUEntry),format= "%d/%m/%Y %H:%M")
Dec$FirstNewAF
Dec$FirstNewAF=strptime(as.character(Dec$FirstNewAF),format= "%d/%m/%Y %H:%M")
summary(July$FirstNewAF)
July$CPB=(as.numeric(substr(as.character(July$CPB),1,2))*60)+as.numeric(substr(as.character(July$CPB),4,5))
July$CPB[1]
Dec$CPB=(as.numeric(substr(as.character(Dec$CPB),1,2))*60)+as.numeric(substr(as.character(Dec$CPB),4,5))
Dec$CPB[1]
PatientIndex=rbind(July, Dec)
summary(PatientIndex$LastITUEntry)
length(unique(PatientIndex$PseudoId))
summary(as.factor(PatientIndex$ProcDetails))
BlackList=read.csv(file.choose()) #Load the attached .csv file
RemoveThese=PatientIndex[PatientIndex$ProcDetails%in%BlackList$Op,]
length(unique(RemoveThese$PseudoId)) #51
length(unique(RemoveThese$PseudoId)) #53
PatientIndex=PatientIndex[!PatientIndex$PseudoId%in%RemoveThese$PseudoId,]
#We want to remove all data recorded after a readmission which followed discharge to the ward (so no z-x-x-2, z-x-x-3 etc)
PatientIndex=PatientIndex[PatientIndex$ITUAdmission==1,]
summary(as.factor(PatientIndex$ProcDetails[PatientIndex$AdmissionOp==1]))
summary(PatientIndex$AdditionalOtherNonCardiacSurgery)
summary(PatientIndex$OtherActualCardProcs)
TakeTheseToo=PatientIndex[{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Sternal Rewire"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Sternal fixation (plates)"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Pacemaker Removal"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Removal Sternal Wire/Debdridement"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Pacemaker Removal"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Renal tumour excision (Involving IVC and RA)"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Major Sternal Debridement/VAC"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Sternal fixation (myocutaneous flap)"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Tamponade/Re-Operation For Bleeding"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Pericardectomy abandoned before sternotomy"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="sternal rewire"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="Sternal wound flap"}|
{PatientIndex$AdmissionOp==1&PatientIndex$ProcDetails=="LVAD Replacement"}|
PatientIndex$AdditionalOtherNonCardiacSurgery=="BIVAD Insertion"|
PatientIndex$AdditionalOtherNonCardiacSurgery=="LVAD Insertion"|
PatientIndex$OtherActualCardProcs=="ECMO decannulation"|
PatientIndex$OtherActualCardProcs=="LVAD Insertion"|
PatientIndex$OtherActualCardProcs=="VA ECMO"|
PatientIndex$OtherActualCardProcs=="VA ECMO insertion"|
PatientIndex$OtherActualCardProcs=="VA ECMO Insertion"|
PatientIndex$OtherActualCardProcs=="Primary VAD;"|
PatientIndex$OtherActualCardProcs=="Primary VAD;Other procedure not listed above;"|
PatientIndex$OtherActualCardProcs=="VA ECMO insertion (removed on ICU)"|
PatientIndex$OtherActualCardProcs=="ASD closure;Primary VAD;"|
PatientIndex$ProcDetails=="VAD Explantation",]
PatientIndex=PatientIndex[!PatientIndex$PseudoId%in%TakeTheseToo$PseudoId,]
length(unique(TakeTheseToo$PseudoId)) #17
PatientIndex$firstchar=substr(PatientIndex$PseudoId,1,1)
PatientIndex=PatientIndex[PatientIndex$firstchar=="z",]
PatientIndex=PatientIndex[order(PatientIndex$PseudoId,PatientIndex$FirstITUEntry),]
PatientIndexList=PatientIndex[!duplicated(PatientIndex$PseudoId),]
PatientIndexList$Pre_OperativeHeartRhythm
PatientIndexList=PatientIndexList[PatientIndexList$Pre_OperativeHeartRhythm!="Atrial fibrillation/flutter",]
PatientIndexList$ProcDetails=droplevels(PatientIndexList$ProcDetails)
PatientIndexAF=PatientIndex[is.na(PatientIndex$FirstNewAF)==F,]
View(PatientIndexAF)
PatientIndex$NoZId=substr(PatientIndex$PseudoId,2,nchar(PatientIndex$PseudoId)
PatientIndex$NoZId=substr(PatientIndex$PseudoId,2,nchar(PatientIndex$PseudoId))
PatientIndex$NoZId=substr(PatientIndex$PseudoId,2,nchar(PatientIndex$PseudoId))
PatientIndex$NoZId=substr(PatientIndex$PseudoId,2,nchar(as.character(PatientIndex$PseudoId)))
PatientIndex$NoZId=as.numeric(as.character(PatientIndex$NoZId))
PatientIndexList=PatientIndex[!duplicated(PatientIndex$PseudoId),]
PatientIndexList$Pre_OperativeHeartRhythm
PatientIndexList=PatientIndexList[PatientIndexList$Pre_OperativeHeartRhythm!="Atrial fibrillation/flutter",]
PatientIndexList$ProcDetails=droplevels(PatientIndexList$ProcDetails)
PatientIndexAF=PatientIndex[is.na(PatientIndex$FirstNewAF)==F,]
View(PatientIndexAF)
source( 'ASWF_ChooseLoadandProcessPatient.R' )
pathFiles <- choose.dir(caption="Select folder with source code.")
pathFiles <- paste0(pathFiles, "\\")
setwd(pathFiles)
source("LibrariesAndSettings.R" , print.eval  = TRUE )
load(choose.files(caption = "Select patientindexmaster.RData"))
setofrepositorynumbers <- c('1' , '2' , '3' , '4' , '5' , '6' , '7' , '8')
numberrep =  as.numeric(select.list(setofrepositorynumbers, preselect = setofrepositorynumbers[1], multiple = FALSE,
title = 'Select number of reporsitory locations', graphics = TRUE ))
# Select reporsitories
path = list()
for(i in 1:numberrep)
{
path[[i]] = choose.dir( caption  <- paste0( "Select folder " ,i,  " containing data repository" ))
if(i == 1){  listAllPatients <- as.matrix(list.dirs(path = path[[i]], full.names = FALSE, recursive = FALSE))  }
if(i > 1){   listAllPatients <- rbind( listAllPatients , as.matrix(list.dirs(path = path[[i]], full.names = FALSE, recursive = FALSE)) ) }
}
source( 'ASWF_ChooseLoadandProcessPatient.R' )
source( 'ASWF_InteractivePatientAnalysis.R'  )
load("~/AKI/re-running with new files/redone all inc the training dataset without preop RRT pts.RData")
ExpectedOlig=sum(T12$JointProbability)  #This gives expected no. of deaths using recalibrated model.
summary(T12$JointProbability)
ExpectedOlig=sum(T12$JointProbability,na.rm =T)   #This gives expected no. of deaths using recalibrated model.
ExpectedOlig12=sum(T12$JointProbability,na.rm =T)   #This gives expected no. of deaths using recalibrated model.
ExpectedOlig=NULL
ExpectedOlig24=sum(T24$JointProbability,na.rm =T)
ExpectedOlig36=sum(T36$JointProbability,na.rm =T)
ExpectedOlig48=sum(T48$JointProbability,na.rm =T)
ExpectedOlig72=sum(T72$JointProbability,na.rm =T)
summary(as.factor(T12$Below0.3for6hourswithinNext12))
summary(as.factor(T12$Below0.3for6hourswithinNext12Num))
summary(as.factor(T24$Below0.3for6hourswithinNext12Num))
summary(as.factor(T36$Below0.3for6hourswithinNext12Num))
summary(as.factor(T48$Below0.3for6hourswithinNext12Num))
summary(as.factor(T72$Below0.3for6hourswithinNext12Num))
71/180
67/105
71/180.32
67/105.66
57/51.54
61/56
61/56.43
40/37.76
val.prob(p, y, m=, cex=.5, lim=c(0,1))  # subgroups of 20 obs.
library(ResourceSelection)
library(pROC)
library(rms)
library(dplyr)
library(PresenceAbsence)
library(PredictABEL)
val.prob(p, y, m=, cex=.5, lim=c(0,1))  # subgroups of 20 obs.
p=T12$JointProbability
y=T12$Below0.3for6hourswithinNext12Num
val.prob(p, y, m=, cex=.5, lim=c(0,1))  # subgroups of 20 obs.
summary(T12)
summary(T12[,13])
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.2) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.01) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.2) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,0.2) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 4, rangeaxis = c(0,0.2) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.2) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,0.1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,1) )
summary(as.factor(T12$JointProbability))
T12=T12[is.na(T12$JointProbability)==F,]
summary(as.factor(T12$JointProbability))
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0.4) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.001) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T24, 13, T24$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T36, 13, T36$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T48, 13, T48$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T72, 13, T72$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,0.5) )
plotCalibration(T24, 13, T24$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,0.5) )
plotCalibration(T36, 13, T36$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,0.5) )
plotCalibration(T48, 13, T48$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,0.5) )
plotCalibration(T72, 13, T72$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,0.5) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,1) )
plotCalibration(T24, 13, T24$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,1) )
plotCalibration(T36, 13, T36$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,1) )
plotCalibration(T48, 13, T48$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,1) )
plotCalibration(T72, 13, T72$JointProbability, plottitle=NA, groups= 10, rangeaxis = c(0,1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,1) )
plotCalibration(T24, 13, T24$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,1) )
plotCalibration(T36, 13, T36$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,1) )
plotCalibration(T48, 13, T48$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,1) )
plotCalibration(T72, 13, T72$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,1) )
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4) )
plotCalibration(T24, 13, T24$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4) )
plotCalibration(T36, 13, T36$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4))
plotCalibration(T48, 13, T48$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4)) )
plotCalibration(T72, 13, T72$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4))
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4) )
plotCalibration(T24, 13, T24$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4) )
plotCalibration(T36, 13, T36$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4))
plotCalibration(T48, 13, T48$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4)) )
plotCalibration(T48, 13, T48$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4))
plotCalibration(T72, 13, T72$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.4))
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T24, 13, T24$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T36, 13, T36$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5))
plotCalibration(T48, 13, T48$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5))
plotCalibration(T72, 13, T72$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5))
plotCalibration(T12, 13, T12$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T24, 13, T24$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5) )
plotCalibration(T36, 13, T36$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5))
plotCalibration(T48, 13, T48$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5))
plotCalibration(T72, 13, T72$JointProbability, plottitle=NA, groups= 5, rangeaxis = c(0,0.5))
save.image("~/AKI/re-running with new files/redone all inc the training dataset without preop RRT pts done ROCS and Plots.RData")
pathFiles <- choose.dir(caption="Select folder with source code.")
pathFiles <- choose.dir(caption="Select folder with source code.")
pathFiles <- paste0(pathFiles, "\\")
setwd(pathFiles)
source("LibrariesAndSettings.R" , print.eval  = TRUE )
load(choose.files(caption = "Select patientindexmaster.RData"))
setofrepositorynumbers <- c('1' , '2' , '3' , '4' , '5' , '6' , '7' , '8')
numberrep =  as.numeric(select.list(setofrepositorynumbers, preselect = setofrepositorynumbers[1], multiple = FALSE,
title = 'Select number of reporsitory locations', graphics = TRUE ))
# Select reporsitories
path = list()
for(i in 1:numberrep)
{
path[[i]] = choose.dir( caption  <- paste0( "Select folder " ,i,  " containing data repository" ))
if(i == 1){  listAllPatients <- as.matrix(list.dirs(path = path[[i]], full.names = FALSE, recursive = FALSE))  }
if(i > 1){   listAllPatients <- rbind( listAllPatients , as.matrix(list.dirs(path = path[[i]], full.names = FALSE, recursive = FALSE)) ) }
}
source( 'ASWF_ChooseLoadandProcessPatient.R' )
source( 'ASWF_InteractivePatientAnalysis.R'  )
