# logistic regression for all variables
model <- (glm(formula = AFLogical ~ Na +K +Urea +Creatinine + CRP +Albumin + Bilirubin + Mg  ,family=binomial(link='logit') , data=PostOpBioChem ))
summary(model)
PostOpBioChem$AFLogical <- sample(PostOpBioChem$AFLogical , length(PostOpBioChem$AFLogical))
PostOpBioChem$AFLogical <- as.factor(PostOpBioChem$AFLogical)}
# logistic regression for all variables
model <- (glm(formula = AFLogical ~ Na +K +Urea +Creatinine + CRP +Albumin + Bilirubin + Mg  ,family=binomial(link='logit') , data=PostOpBioChem ))
summary(model)
PostOpBioChem$AFLogical <- sample(PostOpBioChem$AFLogical , length(PostOpBioChem$AFLogical))
PostOpBioChem$AFLogical <- as.factor(PostOpBioChem$AFLogical)}
# logistic regression for all variables
model <- (glm(formula = AFLogical ~ Na +K +Urea +Creatinine + CRP +Albumin + Bilirubin + Mg  ,family=binomial(link='logit') , data=PostOpBioChem ))
summary(model)
PostOpBioChem$AFLogical <- sample(PostOpBioChem$AFLogical , length(PostOpBioChem$AFLogical))
PostOpBioChem$AFLogical <- as.factor(PostOpBioChem$AFLogical)}
# logistic regression for all variables
model <- (glm(formula = AFLogical ~ Na +K +Urea +Creatinine + CRP +Albumin + Bilirubin + Mg  ,family=binomial(link='logit') , data=PostOpBioChem ))
summary(model)
PostOpBioChem$AFLogical <- sample(PostOpBioChem$AFLogical , length(PostOpBioChem$AFLogical))
PostOpBioChem$AFLogical <- as.factor(PostOpBioChem$AFLogical)}
# logistic regression for all variables
model <- (glm(formula = AFLogical ~ Na +K +Urea +Creatinine + CRP +Albumin + Bilirubin + Mg  ,family=binomial(link='logit') , data=PostOpBioChem ))
summary(model)
PostOpBioChem$AFLogical <- sample(PostOpBioChem$AFLogical , length(PostOpBioChem$AFLogical))
PostOpBioChem$AFLogical <- as.factor(PostOpBioChem$AFLogical)}
# logistic regression for all variables
model <- (glm(formula = AFLogical ~ Na +K +Urea +Creatinine + CRP +Albumin + Bilirubin + Mg  ,family=binomial(link='logit') , data=PostOpBioChem ))
summary(model)
load("C:/Users/Ben/Documents/Output Images/AllPatientAnnotations/HMOutputz1255.RData")
outputstruct[[1]]
outputstruct[[2]]
outputstruct[[3]]
outputstruct[[4]]
outputstruct[[2]]$NonImplausibleSets
numberofCSVs <- select.list( as.character(c(1:10)) , graphics = TRUE  , preselect = '2' )
HaemIndex2017 <- read.csv( choose.files( multi = FALSE ) , stringsAsFactors = FALSE )
if(as.numeric(numberofCSVs) > 1){
for(i in 2:as.numeric(numberofCSVs) )
{
HaemIndex2017 <- rbind(HaemIndex2017, read.csv(choose.files(multi = FALSE), stringsAsFactors = FALSE))
}
}
tmp <- read.csv(choose.files(multi = FALSE), stringsAsFactors = FALSE)
names(HaemIndex2017)
names(tmp)
intersect(names(HaemIndex2017) , names(tmp) )
setdiff
setdiff(names(HaemIndex2017) , names(tmp))
setdiff(names(tmp) , names(HaemIndex2017) )
numberofCSVs <- select.list( as.character(c(1:10)) , graphics = TRUE  , preselect = '2' )
HaemIndex2017 <- read.csv( choose.files( multi = FALSE ) , stringsAsFactors = FALSE )
if(as.numeric(numberofCSVs) > 1){
for(i in 2:as.numeric(numberofCSVs) )
{
HaemIndex2017 <- rbind(HaemIndex2017, read.csv(choose.files(multi = FALSE), stringsAsFactors = FALSE))
}
}
tmp <- read.csv(choose.files(multi = FALSE), stringsAsFactors = FALSE)
names(tmp)
setdiff(names(tmp) , names(HaemIndex2017))
setdiff(names(HaemIndex2017) , names(tmp)  )
numberofCSVs <- select.list( as.character(c(1:10)) , graphics = TRUE  , preselect = '2' )
HaemIndex2017 <- read.csv( choose.files( multi = FALSE ) , stringsAsFactors = FALSE )
if(as.numeric(numberofCSVs) > 1){
for(i in 2:as.numeric(numberofCSVs) )
{
tmp <-  read.csv(choose.files(multi = FALSE), stringsAsFactors = FALSE)
HaemIndex2017 <- rbind(HaemIndex2017,tmp)
rm(tmp)
}
}
HaemIndex2017
names(HaemIndex2017)
length(HaemIndex2017)
HaemIndex2017$NewPseudoId
length(HaemIndex2017$NewPseudoId)
names(HaemIndex2017)[19:length(HaemIndex2017)]
uniquenames <- unique(HaemIndex2017$NewPseudoId)
uniquenames <- uniquenames[!is.na(uniquenames)]
names(HaemIndex2017)[19:(length(HaemIndex2017) -2)]
19:(length(HaemIndex2017) -2)
DP_RestructureHaem <- function(HaemIndex2017){
listoftsvariables <- names(HaemIndex2017)[19:26]
uniquenames <- unique(HaemIndex2017$NewPseudoId)
uniquenames <- uniquenames[!is.na(uniquenames)]
NewData <- list()
for( i in 1:length(uniquenames) ){
NewData[[i]] <- setNames(list(1 , 1) , c('TimeSeriesData' , 'MetaData'))
NewData[[i]]$TimeSeriesData <-  data.frame(time = as.POSIXct(DP_StripTime(HaemIndex2017$PostOpSampleTime[grepl(uniquenames[i] , HaemIndex2017$NewPseudoId) ]) ) , tsdata <- HaemIndex2017[grepl(uniquenames[i] , HaemIndex2017$NewPseudoId)  , 19:26] )
NewData[[i]]$MetaData <- data.frame(HaemIndex2017[which(grepl(uniquenames[i] , HaemIndex2017$NewPseudoId))[1]  , -c(19:26)])
}
NewData <- setNames(NewData , uniquenames)
return(NewData)
}
DP_RestructureHaem( HaemIndex2017 )
poly(1:6, degree = 3, simple = TRUE)
poly
shiny::runApp('Github/UHSM_BHF/WaveformCode/App-1')
CreateDefaultX_PACS
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
FM_SampleDP
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
PER_CreateECG
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
CreateDefaultX_PACS
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
shiny::runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
HTML("less-than-sign script type='text/x-mathjax-config' greater-than-sign
MathJax.Hub.Config({
tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}
});
less-than-sign /script greater-than-sign
")
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
1
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
shiny::runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
runApp('Github/UHSM_BHF/WaveformCode/App-1')
shiny::runApp('Github/UHSM_BHF/WaveformCode/App-2')
path
listAllPatients
runApp('Github/UHSM_BHF/WaveformCode/App-2')
listAllPatients
listAllPatients[1]
listAllPatients[[1]]
runApp('Github/UHSM_BHF/WaveformCode/App-2')
DP_LoadReducedECGs( path , '00' , numberrep = numberrep , FilestoProcess = FilestoProcess)
FilestoProcess <- DP_ChooseECGstoProcess()
DP_LoadReducedECGs( path , '00' , numberrep = numberrep , FilestoProcess = FilestoProcess)
runApp('Github/UHSM_BHF/WaveformCode/App-2')
runApp('Github/UHSM_BHF/WaveformCode/App-2')
BC_PlotCreateRRTimesPlots
DP_ExtractPatientRecordforIndex(PatIndex2017 = PatIndex2017 , PatientCode =  "00")
runApp('Github/UHSM_BHF/WaveformCode/App-2')
BC_PlotCreateRRTimesPlots
BC_PlotAddAFLines
BC_PlotAddViewingRegionLines
runApp('Github/UHSM_BHF/WaveformCode/App-2')
DP_ExtractPatientRecordforIndex
BC_PlotCreateRRTimesPlots
RPeaksStruct
DP_LoadReducedECGs( path , '00' , numberrep = numberrep , FilestoProcess = FilestoProcess)
RPeaksStruct <- DP_LoadReducedECGs( path , '00' , numberrep = numberrep , FilestoProcess = FilestoProcess)
RPeaksStruct$ECGI
1
RPeaksStruct <- DP_LoadRpeaksfile(path , '00' )
#          RRPlot <- BC_PlotCreateRRTimesPlots(RPeaksStruct = RPeaksStruct() )
RRPlot <- BC_PlotCreateRRTimesPlots(RPeaksStruct = RPeaksStruct() , MetaData = MetaData() )
RRPlot <- BC_PlotCreateRRTimesPlots(RPeaksStruct = RPeaksStruct )
MetaData = DP_CreateDummyMetaData(PatIndex2017)
RRPlot <- BC_PlotCreateRRTimesPlots(RPeaksStruct = RPeaksStruct , MetaData = DP_CreateDummyMetaData(PatIndex2017 , '00'))
RRPlot
RPeaksStruct$MetaData
runApp('Github/UHSM_BHF/WaveformCode/App-2')
DP_LoadRpeaksfile
DP_ExtractPatientRecordforIndex
BC_PlotCreateRRTimesPlots
BC_PlotAddAFLines
MetaData$ConfirmedFirstNewAF
as.POSIXct(NA)
RRPlot
runApp('Github/UHSM_BHF/WaveformCode/App-2')
runApp('Github/UHSM_BHF/WaveformCode/App-2')
runApp('Github/UHSM_BHF/WaveformCode/App-2')
shiny::runApp('Github/UHSM_BHF/WaveformCode/App-2')
sum(listAllPatients == 'z1026') ==1
shiny::runApp('Github/UHSM_BHF/WaveformCode/App-2')
runApp('Github/UHSM_BHF/WaveformCode/App-2')
input$PatinetId
runApp('Github/UHSM_BHF/WaveformCode/App-2')
shiny::runApp('Github/UHSM_BHF/WaveformCode/App-2')
UseAnnotatedData = 0
source('FM_CreateRhythumPriors.R')
##### Iteration one #####
numberofsamples <- 1000000
PriorNonImplausibleSetBigeminy <- matrix(0 , numberofsamples , 10)
PriorNonImplausibleSetBigeminy[ , 1] <- 0.5
PriorNonImplausibleSetBigeminy[ , 2] <- 0.5
PriorNonImplausibleSetBigeminy[ , 3] <- 0
PriorNonImplausibleSetBigeminy[ , 4] <- runif(numberofsamples,0.2 , 2)
PriorNonImplausibleSetBigeminy[ , 5] <- runif(numberofsamples,0.2 , 2)
PriorNonImplausibleSetBigeminy[ , 6] <- runif(numberofsamples,0.2 , 2)
PriorNonImplausibleSetBigeminy[ , 7] <- runif(numberofsamples,0.000001 , 0.08)
PriorNonImplausibleSetBigeminy[ , 8] <- runif(numberofsamples,0.000001 , 0.08)
PriorNonImplausibleSetBigeminy[ , 9] <- runif(numberofsamples,0.000001 , 0.08)
PriorNonImplausibleSetBigeminy[ , 10] <- 1
Mu12_UB = function(x){  return( ((1 - 1.7)/(1 - 0.3))*x + 2 ) }
Mu12_LB = function(x){  return( ((0.1 - 0.03)/(1 - 0.3))*x ) }
ValidVector <- (PriorNonImplausibleSetBigeminy[ , 4] < PriorNonImplausibleSetBigeminy[ , 5]) &
((PriorNonImplausibleSetBigeminy[ , 6]) < 2) &
(abs(PriorNonImplausibleSetBigeminy[ , 4] - PriorNonImplausibleSetBigeminy[ , 6]) > 0.2) &
(abs(PriorNonImplausibleSetBigeminy[ , 4] - PriorNonImplausibleSetBigeminy[ , 6]) > Mu12_LB(PriorNonImplausibleSetBigeminy[ , 4]) ) &
(abs(PriorNonImplausibleSetBigeminy[ , 4] - PriorNonImplausibleSetBigeminy[ , 6]) < Mu12_UB(PriorNonImplausibleSetBigeminy[ , 4]) )
Sigma12_UB = function(x){  return( ((0.08)/(0.9))*x + -0.008888888888888 ) }
#ValidVector <- (PriorNonImplausibleSetBigeminy[ , 4] < PriorNonImplausibleSetBigeminy[ , 6]) &
((PriorNonImplausibleSetBigeminy[ , 6]) < 2) &
((PriorNonImplausibleSetBigeminy[ , 4] + PriorNonImplausibleSetBigeminy[ , 6]) > 0.2) &
(abs(PriorNonImplausibleSetBigeminy[ , 4] - PriorNonImplausibleSetBigeminy[ , 6]) > Mu12_LB(PriorNonImplausibleSetBigeminy[ , 4]) ) &
(abs(PriorNonImplausibleSetBigeminy[ , 4] - PriorNonImplausibleSetBigeminy[ , 6]) < Mu12_UB(PriorNonImplausibleSetBigeminy[ , 4]) ) &
(abs(PriorNonImplausibleSetBigeminy[ , 7] + PriorNonImplausibleSetBigeminy[ , 9]) < 0.16)&
(PriorNonImplausibleSetBigeminy[ , 7] < Sigma12_UB(abs(PriorNonImplausibleSetBigeminy[ , 4] - PriorNonImplausibleSetBigeminy[ , 6]) ))
TestSet <- list()
for(i in 1:5){
TestSet[[i]] <- HREL_BigeminySampleECG(X=PriorNonImplausibleSetBigeminy[which(ValidVector)[i],] )
}
FM_CalulateDistance <- function(X , ValidVector ){
X <- apply( X , 2 , DP_NormaliseData)
m <- apply(X[ValidVector,] , 2 , mean)
return( apply(X , 1 , function(x){sum((x -m)^2)}))
}
DistanceVector <- FM_CalulateDistance(X = PriorNonImplausibleSetBigeminy[ , c( 4, 5, 7 , 8)] , ValidVector = ValidVector )
Threshold1 <- quantile(DistanceVector[ValidVector] , 0.95)
Threshold2 <- quantile(DistanceVector[ValidVector] , 0.99)
EdgeValid <- which( (ValidVector)&(DistanceVector>Threshold1)&(DistanceVector<Threshold2))
EdgeNotValid <- which(  (PriorNonImplausibleSetBigeminy[ , 4] > 0.4) &
(PriorNonImplausibleSetBigeminy[ , 4] < PriorNonImplausibleSetBigeminy[ , 6]) &
((PriorNonImplausibleSetBigeminy[ , 4] + PriorNonImplausibleSetBigeminy[ , 6]) < 2)
&(!ValidVector)
&(DistanceVector<Threshold2))
#BC_PlotPairsFromThreeVariables(PriorNonImplausibleSetBigeminy[which(ValidVector)[1:1000] , c(4 , 5 ,7 , 8)] ,
#                              PriorNonImplausibleSetBigeminy[EdgeValid[1:1000] , c(4 , 5 ,7 , 8)] ,
#                               PriorNonImplausibleSetBigeminy[EdgeNotValid[1:1000] , c(4 , 5 ,7 , 8)] )
for(i in c(6:10) ){
TestSet[[i]] <- HREL_BigeminySampleECG(X = PriorNonImplausibleSetBigeminy[EdgeValid[i],] )
}
for(i in c(11:15)){
TestSet[[i]] <- HREL_BigeminySampleECG(PriorNonImplausibleSetBigeminy[EdgeNotValid[i],] )
}
for(i in c(16:20)){
TestSet[[i]] <- HREL_SampleECG(PriorNonImplausibleSetRegular[dim(PriorNonImplausibleSetRegular)[1] - i,] )
}
PermutedList <- sample(1:20 , 20)
GroundTruth <- PermutedList
GroundTruth[GroundTruth <= 10] <- T
GroundTruth[GroundTruth > 10] <- F
TestPoints <- rbind(PriorNonImplausibleSetBigeminy[which(ValidVector)[1:5], ],
PriorNonImplausibleSetBigeminy[EdgeValid[1:5], ],
PriorNonImplausibleSetBigeminy[EdgeNotValid[1:5],],
PriorNonImplausibleSetRegular[(dim(PriorNonImplausibleSetRegular)[1] - 20):(dim(PriorNonImplausibleSetRegular)[1] - 16),])
NumericOutputs <- list(PermutedList , GroundTruth,TestPoints,TestSet)
save(NumericOutputs , file = 'C:\\Users\\Ben\\Documents\\HeartRhythm Elicitation\\Bigeminy\\IterationTwo\\NumericOutputs.RData' )
{
if(file.exists('CheckforDefaultsScript.R')){
source('CheckforDefaultsScript.R')
}else{
pathFiles <- setwd(paste0(choose.dir(caption="Select folder with source code."), "\\"))
source("LibrariesAndSettings.R" , print.eval  = TRUE )
DP_LoadPatientIndex()
DP_ChooseDataReps()
FilestoProcess <- DP_ChooseECGstoProcess()
HoursBeforeandAfter <- DP_SelectHoursBeforeandAfter()
}
listAllPatients <- DP_FilterPatients(listAllPatients , PatIndex2017 , HowtoFilterops , path , FilestoProcess)
set.seed(1)
}
source('FM_CreatePWavePriors.R')
PsimulatorFunction
f_x <- PsimulatorFunction(PriorNonImplausibleSet[2,] , x)
x <- seq(0,1,0.001)
f_x <- PsimulatorFunction(PriorNonImplausibleSet[2,] , x)
plot(f_x)
{
x <- seq(0,1,0.001)
f_x <- 10*PsimulatorFunction(PriorNonImplausibleSet[1,] , x)
nugget <-  0.00001
l <- 0.01
KXX <- DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- BE_SampleGP(KXX)
p1 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5)) + ggtitle('l = 0.01') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- BE_SampleGP(KXX)
p1 <- p1 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.02
KXX <- DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- BE_SampleGP(KXX)
p2 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.02') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- BE_SampleGP(KXX)
p2 <- p2+ geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.04
KXX <- DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- BE_SampleGP(KXX )
p3 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.04') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- BE_SampleGP(KXX)
p3 <- p3 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.1
KXX <- DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- BE_SampleGP(KXX)
p4 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.1') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- BE_SampleGP(KXX)
p4 <- p4 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
}
{
x <- seq(0,1,0.001)
f_x <- 10*PsimulatorFunction(PriorNonImplausibleSet[1,] , x)
nugget <-  0.00001
l <- 0.01
KXX <- DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX)
p1 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5)) + ggtitle('l = 0.01') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x + BE_SampleGP(KXX)
p1 <- p1 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.02
KXX <- DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX)
p2 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.02') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p2 <- p2+ geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.04
KXX <- DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX )
p3 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.04') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p3 <- p3 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.1
KXX <- DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX)
p4 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.1') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p4 <- p4 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
}
x11()
grid.arrange(p1,p2,p3,p4, ncol = 2, nrow = 2,top = textGrob("Samples from GPs",gp=gpar(fontsize=20,font=3)))
{
x <- seq(0,1,0.001)
f_x <- 20*PsimulatorFunction(PriorNonImplausibleSet[1,] , x)
nugget <-  0.00001
l <- 0.01
KXX <- 0.1*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x + BE_SampleGP(KXX)
p1 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5)) + ggtitle('l = 0.01') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x + BE_SampleGP(KXX)
p1 <- p1 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.02
KXX <- 0.1*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX)
p2 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.02') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+0.1*BE_SampleGP(KXX)
p2 <- p2+ geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.04
KXX <- 0.1*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX )
p3 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.04') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p3 <- p3 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.1
KXX <- 0.1*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX)
p4 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.1') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p4 <- p4 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
}
x11()
grid.arrange(p1,p2,p3,p4, ncol = 2, nrow = 2,top = textGrob("Samples from GPs",gp=gpar(fontsize=20,font=3)))
{
sigma_f = 0.5
x <- seq(0,1,0.001)
f_x <- 20*PsimulatorFunction(PriorNonImplausibleSet[2,] , x)
nugget <-  0.00001
l <- 0.01
KXX <- sigma_f*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x + BE_SampleGP(KXX)
p1 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5)) + ggtitle('l = 0.01') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x + BE_SampleGP(KXX)
p1 <- p1 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.02
KXX <- sigma_f*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX)
p2 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.02') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p2 <- p2+ geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.04
KXX <- sigma_f*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX )
p3 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.04') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p3 <- p3 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.1
KXX <- sigma_f*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX)
p4 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.1') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p4 <- p4 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
x11()
grid.arrange(p1,p2,p3,p4, ncol = 2, nrow = 2,top = textGrob("Samples from GPs",gp=gpar(fontsize=20,font=3)))
}
{
sigma_f = 0.5
x <- seq(0,1,0.001)
f_x <- 20*PsimulatorFunction(PriorNonImplausibleSet[2,] , x)
nugget <-  0.00001
l <- 0.01
KXX <- sigma_f*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x + BE_SampleGP(KXX)
p1 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5)) + ggtitle('l = 0.01') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x + BE_SampleGP(KXX)
p1 <- p1 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.02
KXX <- sigma_f*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX)
p2 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.02') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p2 <- p2+ geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.04
KXX <- sigma_f*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX )
p3 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.04') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p3 <- p3 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
l <- 0.1
KXX <- sigma_f*DP_AddNugget(CF_ExponentialFamily(x , x , l , 2), nugget)
y <- f_x+BE_SampleGP(KXX)
p4 <- ggplot(data.frame(x , y) , aes(x , y)) + geom_line(col = rgb(0,0,1,alpha = 0.5))  + ggtitle('l = 0.1') + xlab('t') + ylab(TeX('$\\epsilon_{md}(t)$'))
for(i in 1:9){
y <- f_x+BE_SampleGP(KXX)
p4 <- p4 + geom_line(data = data.frame(x , y) , aes(x , y) , col = rgb(0,0,1,alpha = 0.5))
}
x11()
grid.arrange(p1,p2,p3,p4, ncol = 2, nrow = 2,top = textGrob("Samples from GPs",gp=gpar(fontsize=20,font=3)))
}
x11()
grid.arrange(p1,p2,p3,p4, ncol = 2, nrow = 2,top = textGrob("Samples from GPs",gp=gpar(fontsize=20,font=3)))
